'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/getting-started/','title':"GETTING STARTED",'section':"Docs",'content':"Try Scala without installing anything #  You can try Scala in your browser, with access to all Scala compilers and all published libraries.\nInstall Scala #  Installing Scala means installing various command-line tools such as the Scala compiler and build tools. We recommend using the Scala installer tool that automatically installs all the requirements, but you can still manually install each tool.\nUsing the Scala Installer (recommended way) #  The Scala installer is a tool named cs that ensures that a JVM and standard Scala tools are installed on your system.\n Download the cs tool and execute the setup command  $ brew install coursier/formulas/coursier \u0026amp;\u0026amp; cs setup Alternatively, if you don\u0026rsquo;t use Homebrew\n$ curl -Lo cs https://git.io/coursier-cli-macos \u0026amp;\u0026amp; chmod +x cs \u0026amp;\u0026amp; (xattr -d com.apple.quarantine cs || true) \u0026amp;\u0026amp; ./cs setup Along with managing JVMs, it also installs useful command line tools: Ammonite, coursier, scala (the Scala REPL and script runner), scalac (the Scala compiler), sbt, and scalafmt.\nFor more information, read coursier-cli documentation.\n\u0026hellip;Or manually #   if you don\u0026rsquo;t have Java 8 or 11 installed, download Java from Oracle Java 8, Oracle Java 11, or AdoptOpenJDK 8/11. Refer to JDK Compatibility for Scala/Java compatibility detail. Install sbt  Create a Hello-world project with sbt #  To create a project, you can either use a command-line tool or an IDE. If you are familiar with the command line, we recommend that approach.\nUsing command-line #  sbt is a build tool for Scala. sbt compiles, runs, and tests your Scala code. (It can also publish libraries and do many other tasks.)\n cd to an empty folder. Run the following command sbt new scala/hello-world.g8. This pulls the \u0026lsquo;hello-world\u0026rsquo; template from GitHub. It will also create a target folder, which you can ignore. When prompted, name the application hello-world. This will create a project called \u0026ldquo;hello-world\u0026rdquo;. Let\u0026rsquo;s take a look at what just got generated:  - hello-world - project (sbt uses this for its own files) - build.properties - build.sbt (sbt's build definition file) - src - main - scala (all of your Scala code goes here) - Main.scala (Entry point of program) \u0026lt;-- this is all we need for now More documentation about sbt can be found in the Scala Book and in the official sbt documentation\nWith an IDE #  You can skip the rest of this page and go directly to Building a Scala Project with IntelliJ and sbt\nOpen hello-world project #  Let\u0026rsquo;s use an IDE to open the project. The most popular ones are IntelliJ and VSCode. They both offer rich IDE features, but you can still use many other editors.\nUsing IntelliJ #   Download and install IntelliJ Community Edition Install the Scala plugin by following the instructions on how to install IntelliJ plugins Open the build.sbt file then choose Open as a project  Using VSCode with metals #   Download VSCode Install the Metals extension from the Marketplace Next, open the directory containing a build.sbt file. When prompted to do so, select Import build.  Run Hello World #  Open a terminal\n cd into hello-world. Run sbt. This will open up the sbt console. Type ~run. The ~ is optional and causes sbt to re-run on every file save, allowing for a fast edit/run/debug cycle. sbt will also generate a target directory which you can ignore.  Next Steps #  Once you\u0026rsquo;ve finished the above tutorials, consider checking out:\n  The Scala Book, which provides a set of short lessons introducing Scala’s main features.  The Tour of Scala for bite-sized introductions to Scala\u0026rsquo;s features.  Learning Resources, which includes online interactive tutorials and courses.  Our list of some popular Scala books.  Getting Help #  There are a multitude of mailing lists and real-time chat rooms in case you want to quickly connect with other Scala users. Check out our community page for a list of these resources, and for where to reach out for help.\n$ curl -Lo cs https://git.io/coursier-cli-linux \u0026\u0026 chmod +x cs \u0026\u0026 ./cs setup   Follow the instructions to install the cs launcher then run:\n$ ./cs setup\n $ brew install coursier/formulas/coursier \u0026\u0026 cs setup   Alternatively, if you don't use Homebrew\n$ curl -Lo cs https://git.io/coursier-cli-macos \u0026\u0026 chmod +x cs \u0026\u0026 (xattr -d com.apple.quarantine cs || true) \u0026\u0026 ./cs setup    Download and execute the Scala installer for Windows based on coursier\n"});index.add({'id':1,'href':'/docs/getting-started/intellij-track/building-a-scala-project-with-intellij-and-sbt/','title':"Building a Scala Project with IntelliJ and sbt",'section':"GETTING STARTED",'content':"In this tutorial, we\u0026rsquo;ll see how to build a Scala project using sbt. sbt is a popular tool for compiling, running, and testing Scala projects of any size. Using a build tool such as sbt (or Maven/Gradle) becomes essential once you create projects with dependencies or more than one code file. We assume you\u0026rsquo;ve completed the first tutorial.\nCreating the project #  In this section, we\u0026rsquo;ll show you how to create the project in IntelliJ. However, if you\u0026rsquo;re comfortable with the command line, we recommend you try Getting Started with Scala and sbt on the Command Line and then come back here to the section \u0026ldquo;Writing Scala code\u0026rdquo;.\n If you didn\u0026rsquo;t create the project from the command line, open up IntelliJ and select \u0026ldquo;Create New Project\u0026rdquo;   On the left panel, select Scala and on the right panel, select sbt Click Next Name the project \u0026ldquo;SbtExampleProject\u0026rdquo;   If you already created the project on the command line, open up IntelliJ, select Import Project and open the build.sbt file for your project Make sure the JDK version is 1.8 and the sbt version is at least 0.13.13 Select Use auto-import so dependencies are automatically downloaded when available Select Finish  Understanding the directory structure #  sbt creates many directories which can be useful once you start building more complex projects. You can ignore most of them for now but here\u0026rsquo;s a glance at what everything is for:\n- .idea (IntelliJ files) - project (plugins and additional settings for sbt) - src (source files) - main (application code) - java (Java source files) - scala (Scala source files) \u0026lt;-- This is all we need for now - scala-2.12 (Scala 2.12 specific files) - test (unit tests) - target (generated files) - build.sbt (build definition file for sbt) Writing Scala code #   On the Project panel on the left, expand SbtExampleProject =\u0026gt; src =\u0026gt; main Right-click scala and select New =\u0026gt; Package Name the package example and click OK (or just press the Enter or Return key). Right-click the package example and select New =\u0026gt; Scala class (if you don\u0026rsquo;t see this option, right-click the SbtExampleProject, click Add Frameworks Support, select Scala and proceed) Name the class Main and change the Kind to Object. Change the code in the class to the following:  object Main extends App { val ages = Seq(42, 75, 29, 64) println(s\u0026quot;The oldest person is ${ages.max}\u0026quot;) } Note: IntelliJ has its own implementation of the Scala compiler, and sometimes your code is correct even though IntelliJ indicates otherwise. You can always check to see if sbt can run your project on the command line.\nRunning the project #   From the Run menu, select Edit configurations Click the + button and select sbt Task. Name it Run the program. In the Tasks field, type ~run. The ~ causes sbt to rebuild and rerun the project when you save changes to a file in the project. Click OK. On the Run menu. Click Run \u0026lsquo;Run the program\u0026rsquo;. In the code, change 75 to 61 and look at the updated output in the console.  Adding a dependency #  Changing gears a bit, let\u0026rsquo;s look at how to use published libraries to add extra functionality to our apps.\n Open up build.sbt and add the following line:  libraryDependencies += \u0026quot;org.scala-lang.modules\u0026quot; %% \u0026quot;scala-parser-combinators\u0026quot; % \u0026quot;1.1.2\u0026quot; Here, libraryDependencies is a set of dependencies, and by using +=, we\u0026rsquo;re adding the scala-parser-combinators dependency to the set of dependencies that sbt will go and fetch when it starts up. Now, in any Scala file, you can import classes, objects, etc, from scala-parser-combinators with a regular import.\nYou can find more published libraries on Scaladex, the Scala library index, where you can also copy the above dependency information for pasting into your build.sbt file.\nNext steps #  Continue to the next tutorial in the getting started with IntelliJ series, and learn about testing Scala code in IntelliJ with ScalaTest.\nor\n  The Scala Book, which provides a set of short lessons introducing Scala’s main features.  The Tour of Scala for bite-sized introductions to Scala\u0026rsquo;s features.   Continue learning Scala interactively online on Scala Exercises.  "});index.add({'id':3,'href':'/docs/getting-started/sbt-track/getting-started-with-scala-and-sbt-on-the-command-line/','title':"Getting Started with Scala and sbt on the Command Line",'section':"GETTING STARTED",'content':"In this tutorial, you\u0026rsquo;ll see how to create a Scala project from a template. You can use this as a starting point for your own projects. We\u0026rsquo;ll use sbt, the de facto build tool for Scala. sbt compiles, runs, and tests your projects among other related tasks. We assume you know how to use a terminal.\nInstallation #   Make sure you have the Java 8 JDK (also known as 1.8)  Run javac -version in the command line and make sure you see javac 1.8.___ If you don\u0026rsquo;t have version 1.8 or higher, install the JDK   Install sbt   Mac  Windows  Linux    Create the project #   cd to an empty folder. Run the following command sbt new scala/hello-world.g8. This pulls the \u0026lsquo;hello-world\u0026rsquo; template from GitHub. It will also create a target folder, which you can ignore. When prompted, name the application hello-world. This will create a project called \u0026ldquo;hello-world\u0026rdquo;. Let\u0026rsquo;s take a look at what just got generated:  - hello-world - project (sbt uses this to install and manage plugins and dependencies) - build.properties - src - main - scala (All of your scala code goes here) - Main.scala (Entry point of program) \u0026lt;-- this is all we need for now - build.sbt (sbt's build definition file) After you build your project, sbt will create more target directories for generated files. You can ignore these.\nRunning the project #   cd into hello-world. Run sbt. This will open up the sbt console. Type ~run. The ~ is optional and causes sbt to re-run on every file save, allowing for a fast edit/run/debug cycle. sbt will also generate a target directory which you can ignore.  Modifying the code #   Open the file src/main/scala/Main.scala in your favorite text editor. Change \u0026ldquo;Hello, World!\u0026rdquo; to \u0026ldquo;Hello, New York!\u0026rdquo; If you haven\u0026rsquo;t stopped the sbt command, you should see \u0026ldquo;Hello, New York!\u0026rdquo; printed to the console. You can continue to make changes and see the results in the console.  Adding a dependency #  Changing gears a bit, let\u0026rsquo;s look at how to use published libraries to add extra functionality to our apps.\n Open up build.sbt and add the following line:  libraryDependencies += \u0026quot;org.scala-lang.modules\u0026quot; %% \u0026quot;scala-parser-combinators\u0026quot; % \u0026quot;1.1.2\u0026quot; Here, libraryDependencies is a set of dependencies, and by using +=, we\u0026rsquo;re adding the scala-parser-combinators dependency to the set of dependencies that sbt will go and fetch when it starts up. Now, in any Scala file, you can import classes, objects, etc, from scala-parser-combinators with a regular import.\nYou can find more published libraries on Scaladex, the Scala library index, where you can also copy the above dependency information for pasting into your build.sbt file.\nNext steps #  Continue to the next tutorial in the getting started with sbt series, and learn about testing Scala code with sbt in the command line.\nor\n Continue learning Scala interactively online on Scala Exercises. Learn about Scala\u0026rsquo;s features in bite-sized pieces by stepping through our [Tour of Scala]({{ site.baseurl }}/tour/tour-of-scala.html).  "});index.add({'id':4,'href':'/docs/getting-started/intellij-track/getting-started-with-scala-in-intellij/','title':"Getting Started with Scala in IntelliJ",'section':"GETTING STARTED",'content':"In this tutorial, we\u0026rsquo;ll see how to build a minimal Scala project using IntelliJ IDE with the Scala plugin. In this guide, IntelliJ will download Scala for you.\nInstallation #   Make sure you have the Java 8 JDK (also known as 1.8)  Run javac -version on the command line and make sure you see javac 1.8.___ If you don\u0026rsquo;t have version 1.8 or higher, install the JDK   Next, download and install IntelliJ Community Edition Then, after starting up IntelliJ, you can download and install the Scala plugin by following the instructions on how to install IntelliJ plugins (search for \u0026ldquo;Scala\u0026rdquo; in the plugins menu.)  When we create the project, we\u0026rsquo;ll install the latest version of Scala. Note: If you want to open an existing Scala project, you can click Open when you start IntelliJ.\nCreating the Project #   Open up IntelliJ and click File =\u0026gt; New =\u0026gt; Project On the left panel, select Scala. On the right panel, select IDEA. Name the project HelloWorld Assuming this is your first time creating a Scala project with IntelliJ, you\u0026rsquo;ll need to install a Scala SDK. To the right of the Scala SDK field, click the Create button. Select the highest version number (e.g. {{ site.scala-version }}) and click Download. This might take a few minutes but subsequent projects can use the same SDK. Once the SDK is created and you\u0026rsquo;re back to the \u0026ldquo;New Project\u0026rdquo; window click Finish.  Writing code #   On the Project pane on the left, right-click src and select New =\u0026gt; Scala class. If you don\u0026rsquo;t see Scala class, right-click on HelloWorld and click on Add Framework Support\u0026hellip;, select Scala and proceed. If you see Error: library is not specified, you can either click download button, or select the library path manually. If you only see Scala Worksheet try expanding the src folder and its main subfolder, and right-click on the scala folder. Name the class Hello and change the Kind to object. Change the code in the class to the following:  object Hello extends App { println(\u0026quot;Hello, World!\u0026quot;) } Running it #   Right click on Hello in your code and select Run \u0026lsquo;Hello\u0026rsquo;. You\u0026rsquo;re done!  Experimenting with Scala #  A good way to try out code samples is with Scala Worksheets\n In the project pane on the left, right click src and select New =\u0026gt; Scala Worksheet. Name your new Scala worksheet \u0026ldquo;Mathematician\u0026rdquo;. Enter the following code into the worksheet:  def square(x: Int) = x * x square(2) As you change your code, you\u0026rsquo;ll notice that it gets evaluated in the right pane. If you do not see a right pane, right click on your Scala worksheet in the Project pane, and click on Evaluate Worksheet.\nNext Steps #  Now you know how to create a simple Scala project which can be used for starting to learn the language. In the next tutorial, we\u0026rsquo;ll introduce an important build tool called sbt which can be used for simple projects and production apps.\nUp Next: Building a Scala Project with IntelliJ and sbt\n"});index.add({'id':5,'href':'/docs/getting-started/intellij-track/testing-scala-in-intellij-with-scalatest/','title':"Testing Scala in IntelliJ with ScalaTest",'section':"GETTING STARTED",'content':"There are multiple libraries and testing methodologies for Scala, but in this tutorial, we\u0026rsquo;ll demonstrate one popular option from the ScalaTest framework called FunSuite.\nThis assumes you know how to build a project in IntelliJ.\nSetup #   Create an sbt project in IntelliJ. Add the ScalaTest dependency:  Add the ScalaTest dependency to your build.sbt file: libraryDependencies += \u0026quot;org.scalatest\u0026quot; %% \u0026quot;scalatest\u0026quot; % \u0026quot;3.0.8\u0026quot; % Test  If you get a notification \u0026ldquo;build.sbt was changed\u0026rdquo;, select auto-import. These two actions will cause sbt to download the ScalaTest library. Wait for the sbt sync to finish; otherwise, FunSuite and test() will be unrecognized.   On the project pane on the left, expand src =\u0026gt; main. Right-click on scala and select New =\u0026gt; Scala class. Call it CubeCalculator, change the Kind to object, and click OK. Replace the code with the following: object CubeCalculator extends App { def cube(x: Int) = { x * x * x } }   Creating a test #   On the project pane on the left, expand src =\u0026gt; test. Right-click on scala and select New =\u0026gt; Scala class. Name the class CubeCalculatorTest and click OK. Replace the code with the following: import org.scalatest.FunSuite class CubeCalculatorTest extends FunSuite { test(\u0026quot;CubeCalculator.cube\u0026quot;) { assert(CubeCalculator.cube(3) === 27) } }  In the source code, right-click CubeCalculatorTest and select Run \u0026lsquo;CubeCalculatorTest\u0026rsquo;.  Understanding the code #  Let\u0026rsquo;s go over this line by line:\n class CubeCalculatorTest means we are testing the object CubeCalculator extends FunSuite lets us use functionality of ScalaTest\u0026rsquo;s FunSuite class such as the test function test is function that comes from the FunSuite library that collects results from assertions within the function body. \u0026quot;CubeCalculator.cube\u0026quot; is a name for the test. You can call it anything but one convention is \u0026ldquo;ClassName.methodName\u0026rdquo;. assert takes a boolean condition and determines whether the test passes or fails. CubeCalculator.cube(3) === 27 checks whether the output of the cube function is indeed 27. The === is part of ScalaTest and provides clean error messages.  Adding another test case #   Add another assert statement after the first one that checks for the cube of 0. Re-run the test again by right-clicking CubeCalculatorTest and selecting \u0026lsquo;Run CubeCalculatorTest\u0026rsquo;.  Conclusion #  You\u0026rsquo;ve seen one way to test your Scala code. You can learn more about ScalaTest\u0026rsquo;s FunSuite on the official website.\n"});index.add({'id':6,'href':'/docs/getting-started/sbt-track/testing-scala-with-sbt-on-the-command-line/','title':"Testing Scala with sbt and ScalaTest on the Command Line",'section':"GETTING STARTED",'content':"There are multiple libraries and testing methodologies for Scala, but in this tutorial, we\u0026rsquo;ll demonstrate one popular option from the ScalaTest framework called AnyFunSuite. We assume you know how to create a Scala project with sbt.\nSetup #   On the command line, create a new directory somewhere. cd into the directory and run sbt new scala/scalatest-example.g8 Name the project ScalaTestTutorial. The project comes with ScalaTest as a dependency in the build.sbt file. cd into the directory and run sbt test. This will run the test suite CubeCalculatorTest with a single test called CubeCalculator.cube.  sbt test [info] Loading global plugins from /Users/username/.sbt/0.13/plugins [info] Loading project definition from /Users/username/workspace/sandbox/my-something-project/project [info] Set current project to scalatest-example (in build file:/Users/username/workspace/sandbox/my-something-project/) [info] CubeCalculatorTest: [info] - CubeCalculator.cube [info] Run completed in 267 milliseconds. [info] Total number of tests run: 1 [info] Suites: completed 1, aborted 0 [info] Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0 [info] All tests passed. [success] Total time: 1 s, completed Feb 2, 2017 7:37:31 PM Understanding tests #   Open up two files in a text editor:  src/main/scala/CubeCalculator.scala src/test/scala/CubeCalculatorTest.scala   In the file CubeCalculator.scala, you\u0026rsquo;ll see how we define the function cube. In the file CubeCalculatorTest.scala, you\u0026rsquo;ll see that we have a class named after the object we\u0026rsquo;re testing.   import org.scalatest.funsuite.AnyFunSuite class CubeCalculatorTest extends AnyFunSuite { test(\u0026quot;CubeCalculator.cube\u0026quot;) { assert(CubeCalculator.cube(3) === 27) } } Let\u0026rsquo;s go over this line by line.\n class CubeCalculatorTest means we are testing the object CubeCalculator extends AnyFunSuite lets us use functionality of ScalaTest\u0026rsquo;s AnyFunSuite class such as the test function test is function that comes from AnyFunSuite that collects results from assertions within the function body. \u0026quot;CubeCalculator.cube\u0026quot; is a name for the test. You can call it anything but one convention is \u0026ldquo;ClassName.methodName\u0026rdquo;. assert takes a boolean condition and determines whether the test passes or fails. CubeCalculator.cube(3) === 27 checks whether the output of the cube function is indeed 27. The === is part of ScalaTest and provides clean error messages.  Adding another test case #    Add another test block with its own assert statement that checks for the cube of 0.\n import org.scalatest.funsuite.AnyFunSuite class CubeCalculatorTest extends AnyFunSuite { test(\u0026quot;CubeCalculator.cube 3 should be 27\u0026quot;) { assert(CubeCalculator.cube(3) === 27) } test(\u0026quot;CubeCalculator.cube 0 should be 0\u0026quot;) { assert(CubeCalculator.cube(0) === 0) } }   Execute sbt test again to see the results.\nsbt test [info] Loading project definition from C:\\projects\\scalaPlayground\\scalatestpractice\\project [info] Loading settings for project root from build.sbt ... [info] Set current project to scalatest-example (in build file:/C:/projects/scalaPlayground/scalatestpractice/) [info] Compiling 1 Scala source to C:\\projects\\scalaPlayground\\scalatestpractice\\target\\scala-2.13\\test-classes ... [info] CubeCalculatorTest: [info] - CubeCalculator.cube 3 should be 27 [info] - CubeCalculator.cube 0 should be 0 [info] Run completed in 257 milliseconds. [info] Total number of tests run: 2 [info] Suites: completed 1, aborted 0 [info] Tests: succeeded 2, failed 0, canceled 0, ignored 0, pending 0 [info] All tests passed. [success] Total time: 3 s, completed Dec 4, 2019 10:34:04 PM   Conclusion #  You\u0026rsquo;ve seen one way to test your Scala code. You can learn more about ScalaTest\u0026rsquo;s FunSuite on the official website. You can also check out other testing frameworks such as ScalaCheck and Specs2.\n"});})();